unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Samples.Spin,
  mormot.net.async, mormot.net.sock, mormot.core.base, mormot.core.log, mormot.core.rtti,
  Vcl.ComCtrls;

type
  TForm1 = class(TForm)
    Memo1: TMemo;
    SpinEdit1: TSpinEdit;
    Button1: TButton;
    ListView1: TListView;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    Server: TAsyncServer;
  public
    { Public declarations }
    procedure LogMessage(const Msg: string);
  end;

  TConnection = class(TAsyncConnection)
  protected
    function OnRead: TPollAsyncSocketOnReadWrite; override;
    procedure AfterCreate; override;
    procedure OnClose; override;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

{ TConnection }

function TConnection.OnRead: TPollAsyncSocketOnReadWrite;
var
  Buffer: RawUtf8;
begin
  FastSetString(Buffer, frd.Buffer, frd.Len);
  Result := soContinue;
  TThread.Synchronize(nil, procedure
  begin
    Form1.LogMessage('Received Data: ' + Buffer);
  end);
  frd.Reset;
end;

procedure TConnection.AfterCreate;
begin
  inherited AfterCreate;
  TThread.Synchronize(nil, procedure
  begin
    Form1.LogMessage('Client Connected');
  end);
end;

procedure TConnection.OnClose;
begin
  inherited;
  TThread.Synchronize(nil, procedure
  begin
    Form1.LogMessage('Client Disconnected');
  end);
end;

{ TForm1 }

procedure TForm1.Button1Click(Sender: TObject);
begin
  if not Assigned(Server) then
  begin
    // Create and start the server
    Server := TAsyncServer.Create(
      IntToStr(SpinEdit1.Value),
      nil, nil,
      TConnection,
      'MyAsyncServer',
      TSynLog,
      [acoVerboseLog],
      5
    );

    Button1.Caption := 'Stop Listening';
    SpinEdit1.Enabled := False;
    LogMessage('Server started on port ' + SpinEdit1.Text);
  end
  else
  begin
    // Stop the server
    Server.Free;
    Server := nil;
    Button1.Caption := 'Start Listening';
    SpinEdit1.Enabled := True;
    LogMessage('Server stopped.');
  end;
end;

procedure TForm1.LogMessage(const Msg: string);
begin
  Memo1.Lines.Add(Msg);
end;

end.

